import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.authentication.www.BasicAuthenticationFilter;
import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.Optional;

public class JwtAuthFilter extends BasicAuthenticationFilter {
    private static final Logger log = LoggerFactory.getLogger(JwtAuthFilter.class);

    private static final String AUTH_HEADER = "Authorization";
    private static final String AUTH_TOKEN_PREFIX = "Bearer ";
    private final byte[] secret;

    public JwtAuthFilter(AuthenticationManager authManager, JwtTokenSecretConfig config) {
        super(authManager);
        this.secret = Optional.ofNullable(config.getJwtTokenSecret())
            .filter(StringUtils::isNoneBlank)
            .map(String::getBytes)
            .orElseThrow(() -> new JwtAuthFilterConfigException("JWT token secret is missing!"));
    }

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain chain)
            throws IOException, ServletException {
        String authorizationHeader = request.getHeader(AUTH_HEADER);
        String header = Optional.ofNullable(authorizationHeader)
            .map(String::trim)
            .filter(str -> str.startsWith(AUTH_TOKEN_PREFIX))
            .map(str -> str.replace(AUTH_TOKEN_PREFIX, ""))
            .orElse(null);
        if (header == null) {
            chain.doFilter(request, response);
            return;
        }

        DpmAuthToken token = JwtTokenConverter.convert(header, authorizationHeader, secret);
        if( SecurityContextHolder.getContext() != null && SecurityContextHolder.getContext().getAuthentication() != null ) {
            log.debug("Replacing security context {} by {}", SecurityContextHolder.getContext().getAuthentication(), token);
        }
        SecurityContextHolder.getContext().setAuthentication(token);
        chain.doFilter(request, response);
    }

    static class JwtAuthFilterConfigException extends RuntimeException {
        JwtAuthFilterConfigException(String message) {
            super(message);
        }
    }
}