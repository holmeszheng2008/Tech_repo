class Node {
	int val;
	Node left;
	Node right;
}

Tree DFS NLNRN
Pre-order: NLR
	usage: tree creation, polish notation
In-order: LNR
	usage: BST non-descending order traversal
Post-order: LRN
	usage: tree delete, reverse-polish notation

Node treeCopy(Node root){
	if (root == null) return null;
	Node node = new Node();

	node.val = root.val;
	node.left = treeCopy(root.left)
	node.right = treeCopy(root.right)

	return node;
}

void treeDelete (Node root){
	if (root == null) return;
	treeDelete(root.left);
	root.left = null;
	treeDelete(root.right);
	root.right = null;
}
	plus:
root = null;
