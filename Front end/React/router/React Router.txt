# react-router-dom
# wrap the whole applicaiton and be placed as the root component

import React from 'react';
// react router
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';
// pages
import Home from './Home';
import About from './About';
import People from './People';
import Error from './Error';
import Person from './Person';
// navbar
import Navbar from './Navbar';
const ReactRouterSetup = () => {
  return (
    <Router>
      <Navbar />
      <Switch>
        <Route exact path="/">	//exact is important, otherwise, it will be matched all the time.
          <Home />
        </Route>
        <Route path="/about">
          <About />
        </Route>
        <Route path="/peopole">
          <People />
        </Route>
        <Route path="/person/:id" children={<Person />}></Route>	// id is the parameter when followed by :
        <Route path="*">	// this is the default match
          <Error />
        </Route>
      </Switch>
    </Router>
  );
};


// Link and to attribute
import React from 'react';
import { Link } from 'react-router-dom';
const Navbar = () => {
  return (
    <nav>
      <ul>
        <li>
          <Link to='/'>Home</Link>
        </li>
        <li>
          <Link to='/about'>About</Link>
        </li>
        <li>
          <Link to='/people'>People</Link>
        </li>
      </ul>
    </nav>
  );
};

export default Navbar;


// pass url parameter
const People = () => {
  const [people, setPeople] = useState(data);
  return (
    <div>
      <h1>People Page</h1>
      {people.map((person) => {
        return (
          <div key={person.id} className='item'>
            <h4>{person.name}</h4>
            <Link to={`/person/${person.id}`}>Learn More</Link> // use template string to attach person id to the url path parameter
          </div>
        );
      })}
    </div>
  );
};


// fetch url parameter using useParams
import React, { useState, useEffect } from 'react';
import { data } from '../../../data';
import { Link, useParams } from 'react-router-dom';
const Person = () => {
  const [name, setName] = useState('default name');
  const { id } = useParams();
	// useParams will return a json object containing all the named parameters and the fetched parameter value will always be a string, parse that as appropriate.

	// notice that id is already in the scope, in a class-based component, id should be fetched in the constructor.
  useEffect(() => {
    const newPerson = data.find((person) => person.id === parseInt(id));
    setName(newPerson.name);
  }, []);
  return (
    <div>
      <h1>{name}</h1>
      <Link to='/people' className='btn'>
        Back To People
      </Link>
    </div>
  );
};

export default Person;
