form & source of truth

# JS: DOM holds the source of truth in the value
	form elements has their own internal states
	const input = document.getElementById('myText');
	const input vlaue = input.value;
# React:
	## controlled component:
		let react state be the only sot and re-render those elements each time state is changed.
	## uncontolled component:
		use ref to refer to the form dom element which holds the value:
		
	eg:
	class NameForm extends React.Component {
	  constructor(props) {
	    super(props);
	    this.handleSubmit = this.handleSubmit.bind(this);
	    this.input = React.createRef();
	  }

	  handleSubmit(event) {
	    alert('A name was submitted: ' + this.input.current.value);
	    event.preventDefault();
	  }

	  render() {
	    return (
	      <form onSubmit={this.handleSubmit}>
		<label>
		  Name:
		  <input type="text" ref={this.input} />
		</label>
		<input type="submit" value="Submit" />
	      </form>
	    );
	  }
	}
	
	#### uncontrolled components default values
	With an uncontrolled component, you often want React to specify the initial value, but leave subsequent updates uncontrolled
	render() {
	  return (
	    <form onSubmit={this.handleSubmit}>
	      <label>
		Name:
		<input
		  defaultValue="Bob"
		  type="text"
		  ref={this.input} />
	      </label>
	      <input type="submit" value="Submit" />
	    </form>
	  );
	}
	
	#### <input type="file" />
	In React, an <input type="file" /> is always an uncontrolled component because its value can only be set by a user, and not programmatically.

	class FileInput extends React.Component {
	  constructor(props) {
	    super(props);
	    this.handleSubmit = this.handleSubmit.bind(this);
	    this.fileInput = React.createRef();
	  }
	  handleSubmit(event) {
	    event.preventDefault();
	    alert(
	      `Selected file - ${this.fileInput.current.files[0].name}`
	    );
	  }

	  render() {
	    return (
	      <form onSubmit={this.handleSubmit}>
		<label>
		  Upload file:
		  <input type="file" ref={this.fileInput} />
		</label>
		<br />
		<button type="submit">Submit</button>
	      </form>
	    );
	  }
	}

	ReactDOM.render(
	  <FileInput />,
	  document.getElementById('root')
	);
